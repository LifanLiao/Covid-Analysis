'''
Covid Analysis - final aggregated table & maps related

This file contains a method to generate final aggregated table for
further analysis, a method to generate merged shapefile, and
a method to generate maps.
For details, see method comments
'''
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt


def mapping_df():
    '''
    uses the final aggregated table
    combine it with US shapefile,
    generates a geodataframe for later use.
    '''
    path = 'US_shape/cb_2018_us_state_500k.shp'
    statenames = pd.read_csv('datasets/StateNames.csv')
    statenames = statenames[['State', 'Code']]
    shp = gpd.read_file(path)
    shp = shp[['NAME', 'geometry']]

    shp = shp.merge(statenames, left_on='NAME', right_on='State')
    shp = shp[['State', 'Code', 'geometry']]

    csv = pd.read_csv('final_aggregated_table.csv')
    geo_df = shp.merge(csv, left_on='Code', right_on='Code')
    columns = ['State', 'Code', 'Vaccine_Rate',
               'COVID_Death_Rate', 'GDP per capita',
               'Resident Population Density', 'geometry']
    geo_df = geo_df[columns]
    geo_df = geo_df[(geo_df['Code'] != 'HI') & (geo_df['Code'] != 'AK')]
    return geo_df


def maps(df):
    '''
    uses the geodataframe generated by mapping_df(),
    generates four maps based on vaccine rate,
    death rate, gdp per capita, and population density
    save it as a png file
    '''

    fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(2, 2, figsize=(20, 10))

    df.plot(ax=ax1, column='COVID_Death_Rate', legend=True,
            vmin=0, vmax=20, cmap='OrRd')
    ax1.set_title('Percent of COVID Death')

    df.plot(ax=ax2, column='GDP per capita', legend=True,
            vmin=30000, vmax=60000, cmap='Blues')
    ax2.set_title('GDP per Capita')

    df.plot(ax=ax3, column='Vaccine_Rate', legend=True,
            vmin=50, vmax=80, cmap='Greens')
    ax3.set_title('Vaccine Rate')

    df.plot(ax=ax4, column='Resident Population Density',
            legend=True, vmin=0, vmax=5000, cmap='Purples')
    ax4.set_title('Population Density')

    fig.savefig('maps.png')


def main():
    df = mapping_df()
    maps(df)


if __name__ == '__main__':
    main()
